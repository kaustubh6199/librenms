{
    "project": {},
    "files": {
        "src/jquery.collision.js": {
            "name": "src/jquery.collision.js",
            "modules": {},
            "classes": {
                "Collision": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jquery.coords.js": {
            "name": "src/jquery.coords.js",
            "modules": {},
            "classes": {
                "Coords": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jquery.draggable.js": {
            "name": "src/jquery.draggable.js",
            "modules": {},
            "classes": {
                "Draggable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jquery.gridster.js": {
            "name": "src/jquery.gridster.js",
            "modules": {},
            "classes": {
                "Gridster": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Collision": {
            "name": "Collision",
            "shortname": "Collision",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Gridster"
            ],
            "file": "src/jquery.collision.js",
            "line": 19,
            "description": "Detects collisions between a DOM element against other DOM elements or\nCoords objects.",
            "uses": [
                "Coords"
            ],
            "params": [
                {
                    "name": "el",
                    "description": "The jQuery wrapped HTMLElement.",
                    "type": "HTMLElement"
                },
                {
                    "name": "colliders",
                    "description": "Can be a jQuery collection\n of HTMLElements or an Array of Coords instances.",
                    "type": "HTMLElement|Array"
                },
                {
                    "name": "options",
                    "description": "An Object with all options you want to\n       overwrite:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "on_overlap_start",
                            "description": "Executes a function the first\n   time each `collider ` is overlapped.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "on_overlap_stop",
                            "description": "Executes a function when a\n   `collider` is no longer collided.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "on_overlap",
                            "description": "Executes a function when the\nmouse is moved during the collision.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Collision instance.",
                "type": "Object"
            },
            "is_constructor": 1
        },
        "Coords": {
            "name": "Coords",
            "shortname": "Coords",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Collision"
            ],
            "file": "src/jquery.coords.js",
            "line": 10,
            "description": "Creates objects with coordinates (x1, y1, x2, y2, cx, cy, width, height)\nto simulate DOM elements on the screen.\nCoords is used by Gridster to create a faux grid with any DOM element can\ncollide.",
            "params": [
                {
                    "name": "obj",
                    "description": "The jQuery HTMLElement or a object with: left,\ntop, width and height properties.",
                    "type": "HTMLElement|Object"
                }
            ],
            "return": {
                "description": "Coords instance.",
                "type": "Object"
            },
            "is_constructor": 1
        },
        "Draggable": {
            "name": "Draggable",
            "shortname": "Draggable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Gridster"
            ],
            "file": "src/jquery.draggable.js",
            "line": 26,
            "description": "Basic drag implementation for DOM elements inside a container.\nProvide start/stop/drag callbacks.",
            "params": [
                {
                    "name": "el",
                    "description": "The HTMLelement that contains all the widgets\n to be dragged.",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "An Object with all options you want to\n       overwrite:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "items",
                            "description": "Define who will\n    be the draggable items. Can be a CSS Selector String or a\n    collection of HTMLElements.",
                            "type": "HTMLElement|String",
                            "optional": true
                        },
                        {
                            "name": "distance",
                            "description": "Distance in pixels after mousedown\n    the mouse must move before dragging should start.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "Constrains dragging to the width of\n    the container",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "offset_left",
                            "description": "Offset added to the item\n    that is being dragged.",
                            "type": "Offset_left",
                            "optional": true
                        },
                        {
                            "name": "drag",
                            "description": "Executes a callback when the mouse is\n    moved during the dragging.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "start",
                            "description": "Executes a callback when the drag\n    starts.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "stop",
                            "description": "Executes a callback when the drag stops.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns `el`.",
                "type": "Object"
            },
            "is_constructor": 1
        },
        "Gridster": {
            "name": "Gridster",
            "shortname": "Gridster",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/jquery.gridster.js",
            "line": 33,
            "uses": [
                "Draggable",
                "Collision"
            ],
            "params": [
                {
                    "name": "el",
                    "description": "The HTMLelement that contains all the widgets.",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "An Object with all options you want to\n       overwrite:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "widget_selector",
                            "description": "Define who will\n    be the draggable widgets. Can be a CSS Selector String or a\n    collection of HTMLElements",
                            "type": "HTMLElement|String",
                            "optional": true
                        },
                        {
                            "name": "widget_margins",
                            "description": "Margin between widgets.\n    The first index for the horizontal margin (left, right) and\n    the second for the vertical margin (top, bottom).",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "widget_base_dimensions",
                            "description": "Base widget dimensions\n    in pixels. The first index for the width and the second for the\n    height.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "extra_cols",
                            "description": "Add more columns in addition to\n    those that have been calculated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "extra_rows",
                            "description": "Add more rows in addition to\n    those that have been calculated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "min_cols",
                            "description": "The minimum required columns.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "min_rows",
                            "description": "The minimum required rows.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "autogenerate_stylesheet",
                            "description": "If true, all the\n    CSS required to position all widgets in their respective columns\n    and rows will be generated automatically and injected to the\n    `<head>` of the document. You can set this to false, and write\n    your own CSS targeting rows and cols via data-attributes like so:\n    `[data-col=\"1\"] { left: 10px; }`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "avoid_overlapped_widgets",
                            "description": "Avoid that widgets loaded\n    from the DOM can be overlapped. It is helpful if the positions were\n    bad stored in the database or if there was any conflict.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "serialize_params",
                            "description": "Return the data you want\n    for each widget in the serialization. Two arguments are passed:\n    `$w`: the jQuery wrapped HTMLElement, and `wgd`: the grid\n    coords object (`col`, `row`, `size_x`, `size_y`).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "collision",
                            "description": "An Object with all options for\n    Collision class you want to overwrite. See Collision docs for\n    more info.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "draggable",
                            "description": "An Object with all options for\n    Draggable class you want to overwrite. See Draggable docs for more\n    info.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/jquery.gridster.js",
            "line": 108,
            "description": "Disable dragging.",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 121,
            "description": "Enable dragging.",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 133,
            "description": "Add a new widget to the grid.",
            "itemtype": "method",
            "name": "add_widget",
            "params": [
                {
                    "name": "html",
                    "description": "The string representing the HTML of the widget.",
                    "type": "String"
                },
                {
                    "name": "size_x",
                    "description": "The nº of rows the widget occupies horizontally.",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "The nº of columns the widget occupies vertically.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the jQuery wrapped HTMLElement representing.\n the widget that was just created.",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 163,
            "description": "Get the most left column below to add a new widget.",
            "itemtype": "method",
            "name": "next_position",
            "params": [
                {
                    "name": "size_x",
                    "description": "The nº of rows the widget occupies horizontally.",
                    "type": "Number"
                },
                {
                    "name": "size_y",
                    "description": "The nº of columns the widget occupies vertically.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a grid coords object representing the future\n widget coords.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 205,
            "description": "Remove a widget from the grid.",
            "itemtype": "method",
            "name": "remove_widget",
            "params": [
                {
                    "name": "el",
                    "description": "The jQuery wrapped HTMLElement you want to remove.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 237,
            "description": "Returns a serialized array of the widgets in the grid.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "$widgets",
                    "description": "The collection of jQuery wrapped\n HTMLElements you want to serialize. If no argument is passed all widgets\n will be serialized.",
                    "type": "HTMLElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an Array of Objects with the data specified in\n the serialize_params option.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 259,
            "description": "Returns a serialized array of the widgets that have changed their\n position.",
            "itemtype": "method",
            "name": "serialize_changed",
            "return": {
                "description": "Returns an Array of Objects with the data specified in\n the serialize_params option.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 272,
            "description": "Creates the grid coords object representing the widget a add it to the\nmapped array of positions.",
            "itemtype": "method",
            "name": "register_widget",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 315,
            "description": "Update in the mapped array of positions the value of cells represented by\nthe grid coords object passed in the `grid_data` param.",
            "params": [
                {
                    "name": "grid_data",
                    "description": "The grid coords object representing the cells\n to update in the mapped array.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "Pass `false` or the jQuery wrapped\n HTMLElement, depends if you want to delete an existing position or add\n a new one.",
                    "type": "HTMLElement|Boolean"
                }
            ],
            "itemtype": "method",
            "name": "update_widget_position",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 336,
            "description": "Remove a widget from the mapped array of positions.",
            "itemtype": "method",
            "name": "remove_from_gridmap",
            "params": [
                {
                    "name": "grid_data",
                    "description": "The grid coords object representing the cells\n to update in the mapped array.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 349,
            "description": "Add a widget to the mapped array of positions.",
            "itemtype": "method",
            "name": "add_to_gridmap",
            "params": [
                {
                    "name": "grid_data",
                    "description": "The grid coords object representing the cells\n to update in the mapped array.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The value to set in the specified\n position .",
                    "type": "HTMLElement|Boolean"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 371,
            "description": "Make widgets draggable.",
            "uses": [
                "Draggable"
            ],
            "itemtype": "method",
            "name": "draggable",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 410,
            "description": "This function is executed when the player begins to be dragged.",
            "itemtype": "method",
            "name": "on_start_drag",
            "params": [
                {
                    "name": "The",
                    "description": "original browser event",
                    "type": "Event"
                },
                {
                    "name": "A",
                    "description": "prepared ui object.",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 461,
            "description": "This function is executed when the player is being dragged.",
            "itemtype": "method",
            "name": "on_drag",
            "params": [
                {
                    "name": "The",
                    "description": "original browser event",
                    "type": "Event"
                },
                {
                    "name": "A",
                    "description": "prepared ui object.",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 499,
            "description": "This function is executed when the player stops being dragged.",
            "itemtype": "method",
            "name": "on_stop_drag",
            "params": [
                {
                    "name": "The",
                    "description": "original browser event",
                    "type": "Event"
                },
                {
                    "name": "A",
                    "description": "prepared ui object.",
                    "type": "Object"
                }
            ],
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 555,
            "description": "Executes the callbacks passed as arguments when a column begins to be\noverlapped or stops being overlapped.",
            "params": [
                {
                    "name": "start_callback",
                    "description": "Function executed when a new column\n begins to be overlapped. The column is passed as first argument.",
                    "type": "Function"
                },
                {
                    "name": "stop_callback",
                    "description": "Function executed when a column stops\n being overlapped. The column is passed as first argument.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "on_overlapped_column_change",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 595,
            "description": "Executes the callbacks passed as arguments when a row starts to be\noverlapped or stops being overlapped.",
            "params": [
                {
                    "name": "start_callback",
                    "description": "Function executed when a new row begins\n to be overlapped. The row is passed as first argument.",
                    "type": "Function"
                },
                {
                    "name": "stop_callback",
                    "description": "Function executed when a row stops being\n overlapped. The row is passed as first argument.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "on_overlapped_row_change",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 631,
            "description": "Sets the current position of the player",
            "params": [
                {
                    "name": "start_callback",
                    "description": "Function executed when a new row begins\n to be overlapped. The row is passed as first argument.",
                    "type": "Function"
                },
                {
                    "name": "stop_callback",
                    "description": "Function executed when a row stops being\n overlapped. The row is passed as first argument.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "set_player",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 684,
            "description": "See which of the widgets in the $widgets param collection can go to\na upper row and which not.",
            "itemtype": "method",
            "name": "widgets_contraints",
            "params": [
                {
                    "name": "$widgets",
                    "description": "A jQuery wrapped collection of\nHTMLElements.",
                    "type": "HTMLElements"
                }
            ],
            "return": {
                "description": "Returns a literal Object with two keys: `can_go_up` &\n`can_not_go_up`. Each contains a set of HTMLElements.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 720,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) in ascending way.",
            "itemtype": "method",
            "name": "sort_by_row_asc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 740,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) placing first the empty cells upper left.",
            "itemtype": "method",
            "name": "sort_by_row_and_col_asc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 760,
            "description": "Sorts an Array of grid coords objects by column (representing the grid\ncoords of each widget) in ascending way.",
            "itemtype": "method",
            "name": "sort_by_col_asc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 780,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) in descending way.",
            "itemtype": "method",
            "name": "sort_by_row_desc",
            "params": [
                {
                    "name": "widgets",
                    "description": "Array of grid coords objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the array sorted.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 799,
            "description": "Sorts an Array of grid coords objects (representing the grid coords of\neach widget) in descending way.",
            "itemtype": "method",
            "name": "manage_movements",
            "params": [
                {
                    "name": "$widgets",
                    "description": "A jQuery collection of HTMLElements\n representing the widgets you want to move.",
                    "type": "HTMLElements"
                },
                {
                    "name": "to_col",
                    "description": "The column to which we want to move the widgets.",
                    "type": "Number"
                },
                {
                    "name": "to_row",
                    "description": "The row to which we want to move the widgets.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 845,
            "description": "Determines if there is a widget in the row and col given. Or if the\nHTMLElement passed as first argument is the player.",
            "itemtype": "method",
            "name": "is_player",
            "params": [
                {
                    "name": "col_or_el",
                    "description": "A jQuery wrapped collection of\nHTMLElements.",
                    "type": "Number|HTMLElement"
                },
                {
                    "name": "row",
                    "description": "The column to which we want to move the widgets.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 862,
            "description": "Determines if the widget that is being dragged is currently over the row\nand col given.",
            "itemtype": "method",
            "name": "is_player_in",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 877,
            "description": "Determines if the placeholder is currently over the row and col given.",
            "itemtype": "method",
            "name": "is_placeholder_in",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 891,
            "description": "Determines if the placeholder is currently over the column given.",
            "itemtype": "method",
            "name": "is_placeholder_in_col",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 904,
            "description": "Determines if the cell represented by col and row params is empty.",
            "itemtype": "method",
            "name": "is_empty",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 923,
            "description": "Determines if the cell represented by col and row params is occupied.",
            "itemtype": "method",
            "name": "is_occupied",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 943,
            "description": "Determines if there is a widget in the cell represented by col/row params.",
            "itemtype": "method",
            "name": "is_widget",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns false if there is no widget,\nelse returns the jQuery HTMLElement",
                "type": "Boolean|HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 968,
            "description": "Determines if there is a widget in the cell represented by col/row\nparams and if this is under the widget that is being dragged.",
            "itemtype": "method",
            "name": "is_widget_under_player",
            "params": [
                {
                    "name": "col",
                    "description": "The column to check.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true or false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 985,
            "description": "Get widgets overlapping with the player.",
            "itemtype": "method",
            "name": "get_widgets_under_player",
            "return": {
                "description": "Returns a jQuery collection of HTMLElements",
                "type": "HTMLElement"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1007,
            "description": "Put placeholder at the row and column specified.",
            "itemtype": "method",
            "name": "set_placeholder",
            "params": [
                {
                    "name": "col",
                    "description": "The column to which we want to move the\n placeholder.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to which we want to move the\n placeholder.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1056,
            "description": "Determines whether the player can move to a position above.",
            "itemtype": "method",
            "name": "can_go_player_up",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The actual grid coords object of the\n player.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If the player can be moved to an upper row\n returns the row number, else returns false.",
                "type": "Number|Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1105,
            "description": "Determines whether a widget can move to a position above.",
            "itemtype": "method",
            "name": "can_go_widget_up",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The actual grid coords object of the\n widget we want to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If the widget can be moved to an upper row\n returns the row number, else returns false.",
                "type": "Number|Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1158,
            "description": "Search a valid row for the widget represented by `widget_grid_data' in\nthe `upper_rows` array. Iteration starts from row specified in `min_row`.",
            "itemtype": "method",
            "name": "get_valid_rows",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The actual grid coords object of the\n player.",
                    "type": "Object"
                },
                {
                    "name": "upper_rows",
                    "description": "An array with columns as index and arrays\n of valid rows as values.",
                    "type": "Array"
                },
                {
                    "name": "min_row",
                    "description": "The upper row from which the iteration will start.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the upper row valid from the `upper_rows`\n for the widget in question.",
                "type": "Number|Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1236,
            "description": "Get widgets overlapping with the player.",
            "itemtype": "method",
            "name": "get_widgets_overlapped",
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "HTMLElements"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1269,
            "description": "This callback is executed when the player begins to collide with a column.",
            "itemtype": "method",
            "name": "on_start_overlapping_column",
            "params": [
                {
                    "name": "col",
                    "description": "The collided column.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "HTMLElements"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1281,
            "description": "A callback executed when the player begins to collide with a row.",
            "itemtype": "method",
            "name": "on_start_overlapping_row",
            "params": [
                {
                    "name": "col",
                    "description": "The collided row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "HTMLElements"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1293,
            "description": "A callback executed when the the player ends to collide with a column.",
            "itemtype": "method",
            "name": "on_stop_overlapping_column",
            "params": [
                {
                    "name": "col",
                    "description": "The collided row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "HTMLElements"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1311,
            "description": "This callback is executed when the player ends to collide with a row.",
            "itemtype": "method",
            "name": "on_stop_overlapping_row",
            "params": [
                {
                    "name": "row",
                    "description": "The collided row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns a jQuery collection of HTMLElements.",
                "type": "HTMLElements"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1331,
            "description": "Move a widget to a specific row. The cell or cells must be empty.\nIf the widget has widgets below, all of these widgets will be moved also\nif they can.",
            "itemtype": "method",
            "name": "move_widget_to",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery wrapped HTMLElement of the\nwidget is going to be moved.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1375,
            "description": "Move up the specified widget and all below it.",
            "itemtype": "method",
            "name": "move_widget_up",
            "params": [
                {
                    "name": "$widget",
                    "description": "The widget you want to move.",
                    "type": "HTMLElement"
                },
                {
                    "name": "y_units",
                    "description": "The number of cells that the widget has to move.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1423,
            "description": "Move down the specified widget and all below it.",
            "itemtype": "method",
            "name": "move_widget_down",
            "params": [
                {
                    "name": "$widget",
                    "description": "The jQuery object representing the widget\n you want to move.",
                    "type": "HTMLElement"
                },
                {
                    "name": "The",
                    "description": "number of cells that the widget has to move.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1469,
            "description": "Check if the widget can move to the specified row, else returns the\nupper row possible.",
            "itemtype": "method",
            "name": "can_go_up_to_row",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The current grid coords object of the\n widget.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The target column.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The target row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the row number if the widget can move\n to the target position, else returns false.",
                "type": "Boolean|Number"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1560,
            "description": "Get widgets below a widget.",
            "itemtype": "method",
            "name": "widgets_below",
            "params": [
                {
                    "name": "$el",
                    "description": "The jQuery wrapped HTMLElement.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "A jQuery collection of HTMLElements.",
                "type": "HTMLElements"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1589,
            "description": "Update the array of mapped positions with the new player position.",
            "itemtype": "method",
            "name": "set_cells_player_occupies",
            "params": [
                {
                    "name": "col",
                    "description": "The new player col.",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "The new player row.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1606,
            "description": "Remove from the array of mapped positions the reference to the player.",
            "itemtype": "method",
            "name": "empty_cells_player_occupies",
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1644,
            "description": "Check if it's possible to move a widget to a specific col/row. It takes\ninto account the dimensions (`size_y` and `size_x` attrs. of the grid\n coords object) the widget occupies.",
            "itemtype": "method",
            "name": "can_move_to",
            "params": [
                {
                    "name": "widget_grid_data",
                    "description": "The grid coords object that represents\n the widget.",
                    "type": "Object"
                },
                {
                    "name": "The",
                    "description": "col target col.",
                    "type": "Object"
                },
                {
                    "name": "The",
                    "description": "row target row.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if all cells are empty, else return false.",
                "type": "Boolean"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1684,
            "description": "Given the leftmost column returns all columns that are overlapping\n with the player.",
            "itemtype": "method",
            "name": "get_targeted_columns",
            "params": [
                {
                    "name": "from_col",
                    "description": "The leftmost column.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an array with column numbers.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1703,
            "description": "Given the upper row returns all rows that are overlapping with the player.",
            "itemtype": "method",
            "name": "get_targeted_rows",
            "params": [
                {
                    "name": "from_row",
                    "description": "The upper row.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an array with row numbers.",
                "type": "Array"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1720,
            "description": "Get all columns and rows that a widget occupies.",
            "itemtype": "method",
            "name": "get_cells_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object of the widget.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns an object like `{ cols: [], rows: []}`.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1748,
            "description": "Iterate over the cells occupied by a widget executing a function for\neach one.",
            "itemtype": "method",
            "name": "for_each_cell_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object that represents the\n widget.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each column\n iteration. Column and row are passed as arguments.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1769,
            "description": "Iterate over the columns occupied by a widget executing a function for\neach one.",
            "itemtype": "method",
            "name": "for_each_column_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object that represents\n the widget.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each column\n iteration. The column number is passed as first argument.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1788,
            "description": "Iterate over the rows occupied by a widget executing a function for\neach one.",
            "itemtype": "method",
            "name": "for_each_row_occupied",
            "params": [
                {
                    "name": "el_grid_data",
                    "description": "The grid coords object that represents\n the widget.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each column\n iteration. The row number is passed as first argument.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1855,
            "description": "Iterate over each widget above the column and row specified.",
            "itemtype": "method",
            "name": "for_each_widget_above",
            "params": [
                {
                    "name": "col",
                    "description": "The column to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each widget\n iteration. The value of `this` inside the function is the jQuery\n wrapped HTMLElement.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1872,
            "description": "Iterate over each widget below the column and row specified.",
            "itemtype": "method",
            "name": "for_each_widget_below",
            "params": [
                {
                    "name": "col",
                    "description": "The column to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "row",
                    "description": "The row to start iterating.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to execute on each widget\n iteration. The value of `this` inside the function is the jQuery wrapped\n HTMLElement.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster Class.",
                "type": "Class"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1889,
            "description": "Returns the highest occupied cell in the grid.",
            "itemtype": "method",
            "name": "get_highest_occupied_cell",
            "return": {
                "description": "Returns an object with `col` and `row` numbers.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1947,
            "description": "Set the current height of the parent grid.",
            "itemtype": "method",
            "name": "set_dom_grid_height",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 1960,
            "description": "It generates the neccessary styles to position the widgets.",
            "itemtype": "method",
            "name": "generate_stylesheet",
            "params": [
                {
                    "name": "rows",
                    "description": "Number of columns.",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of rows.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 2030,
            "description": "Injects the given CSS as string to the head of the document.",
            "itemtype": "method",
            "name": "add_style_tag",
            "params": [
                {
                    "name": "css",
                    "description": "The styles to apply.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 2053,
            "description": "Generates a faux grid to collide with it when a widget is dragged and\ndetect row or column that we want to go.",
            "itemtype": "method",
            "name": "generate_faux_grid",
            "params": [
                {
                    "name": "rows",
                    "description": "Number of columns.",
                    "type": "Number"
                },
                {
                    "name": "cols",
                    "description": "Number of rows.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 2089,
            "description": "Recalculates the offsets for the faux grid. You need to use it when\nthe browser is resized.",
            "itemtype": "method",
            "name": "recalculate_faux_grid",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 2113,
            "description": "Get all widgets in the DOM and register them.",
            "itemtype": "method",
            "name": "get_widgets_from_DOM",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        },
        {
            "file": "src/jquery.gridster.js",
            "line": 2127,
            "description": "Calculate columns and rows to be set based on the configuration\n parameters, grid dimensions, etc ...",
            "itemtype": "method",
            "name": "generate_grid_and_stylesheet",
            "return": {
                "description": "Returns the instance of the Gridster class.",
                "type": "Object"
            },
            "class": "Gridster"
        }
    ]
}